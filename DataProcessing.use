model DataProcessing
enum ValueType{Categorical, Float, DateTime, Int, Boolean, String}
enum ModelMethodType{Train, Test}
enum ClassificationAlgorithmType{DecisionTree, SVM, LogisticRegression, RandomForest}
enum RegressionAlgorithmType{DecissionTreeRegresor, SVR, LinearRegression, RandomForestRegresor}
enum ClusteringAlgorithmType{KMeans, KModes, HiererchicalClustering}
enum SortType{ASC, DESC}
enum PrimitiveType{BoolPr, IntPr, FloatPr, StringPr}
enum ClosureType{openOpen, openClosed, closedOpen, closedClosed}


abstract class Parameter
  attributes
    name:String
	optional:Boolean
end

class ColumnParam < Parameter
  attributes
   exclude:Boolean
end

class Primitive < Parameter
  attributes
	value:String
	type:PrimitiveType
end

class ModelMethod < Parameter
	attributes
	 method:ModelMethodType
end

class SortCriteria < Parameter
	attributes
	 sortType:SortType
end

class BinParam < Parameter
	attributes
		binValue:String
		leftMargin:Real
		rightMargin:Real
		closure:ClosureType
end

class Rule < Parameter
end


abstract class UnaryOp
end

class MissingOp < UnaryOp
end

class NotOP < UnaryOp
end

abstract class BinaryOp < UnaryOp
end

class LessOp < BinaryOp
end

class LessEqualOp < BinaryOp
end

class GreatherOp < BinaryOp
end

class GreatherEqualOp < BinaryOp
end

class EqualOp < BinaryOp
end

class Label < Parameter
	attributes
		label:String
		value:Integer
end

class MathFunction < Parameter
end

class Division < MathFunction
end

class FilterType < Parameter
end

class ColValue < FilterType
end

class RowNumber < FilterType
end

class MatchingType < Parameter
end

class MissingValues < MatchingType
end

class Range < MatchingType
end

class RangeInt < Range
	attributes
	 min:Integer
	 max:Integer
end

class RangeFloat < Range
	attributes
	 min:Real
	 max:Real
end

abstract class PortType
	attributes
	 uri:Integer
	 name:String
	 path:String
end

class Dataset < PortType
	attributes
	 sep:String
	 null_values: Set(String)
	operations
	  getColumn(name : String) : Column = 
	  self.cols->select(c|c.name = name)->asSequence->at(1)
	  existColumn(name : String) : Boolean =
	  self.cols.name->includes(name)
	  getDataByUri(uri: Integer) : Set(Data) =
	  self.data->select(d | d.col.uri = uri)

end

abstract class MLModel < PortType
end

class ClassificationModel < MLModel
	attributes
	 algorithm:ClassificationAlgorithmType
end

class RegressionModel < MLModel
	attributes
	 algorithm:RegressionAlgorithmType
end

class ClusteringModel < MLModel
	attributes
	 algorithm:ClusteringAlgorithmType
end

class DataVisualization < PortType
end
	 

abstract class DataProcessingElement
	attributes
		uri:String
end

class Job < DataProcessingElement
end

abstract class DataOperation < DataProcessingElement
   operations
	 getColumnParam(index: Integer) : ColumnParam =
	 	self.parameter->select(p|p.oclIsTypeOf(ColumnParam)).oclAsType(ColumnParam)->asSequence->at(index)
	 getColumnParams() : Bag(ColumnParam) =
	    self.parameter->select(p|p.oclIsTypeOf(ColumnParam)).oclAsType(ColumnParam)
	getInputDataset(index: Integer) : Dataset = 
		self.inputPort->select(ip | ip.oclIsTypeOf(Dataset)).oclAsType(Dataset)->asSequence->at(index)
	getInputDatasets() : Bag(Dataset) =
		self.inputPort->select(ip | ip.oclIsTypeOf(Dataset)).oclAsType(Dataset)
	getOutputDataset(index: Integer) : Dataset = 
		self.outputPort->select(op | op.oclIsTypeOf(Dataset)).oclAsType(Dataset)->asSequence->at(index)
	getOutputDatasets() : Bag(Dataset) =
		self.outputPort->select(op | op.oclIsTypeOf(Dataset)).oclAsType(Dataset)
	getPrimitiveParameter(name: String) : Primitive =
		self.parameter->select(p|p.oclIsTypeOf(Primitive) and p.name = name).oclAsType(Primitive)->asSequence()->at(1)
	existPrimitiveParameter(name: String) : Boolean =
	    self.parameter->select(p|p.oclIsTypeOf(Primitive) and p.name = name)->size() >= 1
end

class OneHot < DataOperation
end

class RemoveColumns < DataOperation
end

class ImbalancedLearn < DataOperation
end

class Split < DataOperation
end

class StringToNumber < DataOperation
end

class Concatenate < DataOperation
end

class ConstantValueColumn < DataOperation
end

class ColumnRename < DataOperation
end

class NumberToString < DataOperation
end

class RowFilter < DataOperation
end

class RowSplitter < DataOperation
end

class Binarizer < DataOperation
end

class Sorter < DataOperation
end

class RuleBasedRowFilter < DataOperation
end

class Discretize < DataOperation
end

class ConditionalFunction < DataOperation
end

class Normalizer < DataOperation
end

class MathFormula < DataOperation
end

class LabelEncoder < DataOperation
end

class Column
   attributes
     uri:Integer
	 name:String
	 type:ValueType
	 id:Boolean
	 target:Boolean
end	 
class Row
   attributes
      uri:Integer
end

class Data
	attributes
		value:String
end
	  
association DataRow between
	Data [1] role data
	Row [1] role rowOfData
end

association RowData between
	Row [1] role row
	Data [1..*] role dataOfRow
end

association DataCol between
	Data [1] role data
	Column [1] role colOfData
end

association ColData between
	Column [1] role col
	Data [1..*] role dataOfCol
end

association ColValueMatchingType between
	ColValue [1] 
	MatchingType [1]
end

association RowNumberMatchingType between
	RowNumber [1]
	RangeInt [1]
end

aggregation DSCol between
	Dataset [1]
	Column [1..*] role cols
end

aggregation DSRow between
	Dataset [1] 
	Row [1..*] role rows
end

aggregation DSData between
	Dataset [1] 
	Data [1..*] role data
end

aggregation JobDop between
	Job [1] role jobDop
	DataOperation [1..*] role dopJob
end

aggregation JobJob between
	Job[1]
	Job [0..*] role jobInput
end

aggregation  InputPort between
	DataProcessingElement [1] role dataProcessingInput
	PortType [1..*] role inputPort
end

aggregation  OutputPort between
	DataProcessingElement [1] role dataProcessingOutput
	PortType [1..*] role outputPort
end

aggregation ColOperand between
	UnaryOp [1] role unaryOp
	ColumnParam [1] role colOperand
end

aggregation ResultOperand between
	UnaryOp [1] role unaryOp
	Primitive [1] role resultOperand
end

aggregation CompareOperand between
	BinaryOp [1]
	Primitive [1] role compareOperand
end

association ColumnParams between
    ColumnParam[1]
	Column [1]
end

aggregation DopParam between
	DataOperation [1]
	Parameter [1..*]
end

aggregation RuleOperator between
	Rule[1]
	UnaryOp [1] role operator
end

aggregation MathFunctionColOp between
	MathFunction [1]
	ColumnParam [1]
end

aggregation MathFunctionPrimOp between
	MathFunction [1]
	Primitive [1]
end


constraints

context OneHot
	inv pre_columnDset: self.getColumnParams()->forAll(cp | cp.column.dataset = self.getInputDataset(1))
	inv pre_columnTypeCategorical: self.getColumnParam(1).column.type = ValueType::Categorical or 
						self.getColumnParam(1).column.type = ValueType::Boolean
	inv pre_columnId: self.getColumnParams()->forAll(cp | cp.column.id = false)
	inv pre_columnTarget: self.getColumnParams()->forAll(cp | cp.column.target = false)
	inv inv_makeCorrectOneHotZero: self.getOutputDataset(1).data->select(
		d | d.col.uri = self.getColumnParams()->collect(column.uri)->asSequence()->at(1) )->forAll(
			d | self.getOutputDataset(1).data->select(
				d2 | self.getOutputDataset(1).cols->select(
					c | (self.getOutputDataset(1).data->select(d|d.col.uri=(self.getColumnParams()->collect(column.uri)->asSequence()->at(1))
					)->collect(value)->asSet())->includes(c.name))->includes(d2.col) 
				and d2.row.uri= d.row.uri 
				and d2.col.name <> d.value)->collect(value)->forAll(v|v='0'))
	inv inv_makeCorrectOneHotOne:self.getInputDataset(1).data->select(
		d | d.col.uri = self.getColumnParams()->collect(column.uri)->asSequence()->at(1) )->forAll(
			d | self.getOutputDataset(1).data->select(d2 | d2.col.name = d.value and d2.row.uri = d.row.uri)->collect(value)->asSequence()->at(1) = '1')
	inv post_existsColumns: self.getOutputDataset(1).data->select(
		d|d.col.uri = self.getColumnParams()->collect(column.uri)->asSequence()->at(1))->forAll(
			d|self.getOutputDataset(1).existColumn(d.value))
	inv post_colTypes: self.getOutputDataset(1).data->select(
		d|d.col.uri = self.getColumnParams()->collect(column.uri)->asSequence()->at(1))->forAll(
			d|self.getOutputDataset(1).getColumn(d.value).type=ValueType::Int)
	inv post_colId: self.getOutputDataset(1).data->select(
		d|d.col.uri = self.getColumnParams()->collect(column.uri)->asSequence()->at(1))->forAll(
			d|self.getOutputDataset(1).getColumn(d.value).id=false)
	inv post_colTarget: self.getOutputDataset(1).data->select(
		d|d.col.uri = self.getColumnParams()->collect(column.uri)->asSequence()->at(1))->forAll(
			d|self.getOutputDataset(1).getColumn(d.value).target=false)

context ImbalancedLearn
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv pre_colType: self.getColumnParam(1).column.type = ValueType::Categorical or 
						self.getColumnParam(1).column.type = ValueType::Boolean or 
						self.getColumnParam(1).column.type = ValueType::String

	inv post_columnDset: self.getOutputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv post_colType: self.getOutputDataset(1).cols->select(
		c | c.name = self.getColumnParam(1).column.name)->asSequence()->at(1).type = ValueType::Categorical
			or self.getOutputDataset(1).cols->select(
		c | c.name = self.getColumnParam(1).column.name)->asSequence()->at(1).type = ValueType::Boolean or
			self.getOutputDataset(1).cols->select(
		c | c.name = self.getColumnParam(1).column.name)->asSequence()->at(1).type = ValueType::String

	inv inv_makeCorrectImbLearn: self.getOutputDataset(1).data->select(d|d.col.uri=  self.getColumnParam(1).column.uri)->collect(value)->asSet()->forAll(
			v | self.getOutputDataset(1).data->select(d|d.col.uri=  self.getColumnParams()->collect(
				column.uri)->asSequence()->at(1) and d.value = v)->size() = self.getOutputDataset(1).data->select(d|d.col.uri=  self.getColumnParams()->collect(
				column.uri)->asSequence()->at(1) and d.value <> v)->size())

context Split
	inv pre_sizeParam: self.getPrimitiveParameter('size').value.toReal() < 1
	inv pre_stratifiedCol:
		if self.getPrimitiveParameter('stratified').value.toBoolean() = true
		then
			self.getColumnParams()->size()=1 and 
			self.getColumnParams()->forAll(
				cp | cp.column.dataset = self.getInputDataset(1))
		else
			true
		endif

	inv post_two_datasets: self.getOutputDatasets()->size() = 2
	inv inv_first_number_rows: self.getOutputDataset(1).rows->size() = (
		(self.getPrimitiveParameter('size').value.toReal()) * self.getInputDatasets().rows->size()).floor()
	inv inv_second_number_rows: self.getOutputDataset(2).rows->size() = ( 
		(1 - self.getPrimitiveParameter('size').value.toReal()) * 
		self.getInputDatasets().rows->size()).round()

context RemoveColumns
	inv pre_columnDset: self.getColumnParams()->forAll(cp | self.getInputDataset(1).existColumn(cp.column.name))
	inv post_noColumnDset: self.getOutputDataset(1).cols->forAll(col|col.name<>self.getColumnParams()->collect(column.name)->asSequence()->at(1))

context StringToNumber
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv pre_columnTypeString: self.getColumnParam(1).column.type = ValueType::String
	inv post_columnDset: self.getOutputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv post_columnTypeNumerical: self.getOutputDataset(1).cols->select(
		c | c.name = self.getColumnParam(1).column.name)->asSequence()->at(1).type = ValueType::Int
			or self.getOutputDataset(1).cols->select(
		c | c.name = self.getColumnParam(1).column.name)->asSequence()->at(1).type = ValueType::Float
	inv inv_makeCorrectStringToNumber:self.getInputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value) = self.getOutputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)

context Discretize
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv pre_columnTypeNumerical: self.getColumnParam(1).column.type = ValueType::Int or self.getColumnParam(1).column.type = ValueType::Float
	inv post_columnsTypeString: self.getOutputDataset(1).cols->select(
		c | c.name = self.getPrimitiveParameter('derivedField').value)->asSequence->at(1).type = ValueType::String or 
		self.getOutputDataset(1).cols->select(
		c | c.name = self.getPrimitiveParameter('derivedField').value)->asSequence->at(1).type = ValueType::Categorical
	inv inv_makeCorrectBin: self.getInputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->forAll
		(
			d | let binName = self.getOutputDataset(1).data->select( 
				d2 | d2.col.name = self.getPrimitiveParameter('derivedField').value
				and d2.row.uri = d.row.uri)->asSequence()->at(1).value in
				let bin = self.parameter->select(p | p.oclIsTypeOf(BinParam)).oclAsType(BinParam)->select(b | b.binValue = binName)->asSequence()->at(1) in
					if bin.closure = ClosureType::closedClosed then
						d.value.toReal() >= bin.leftMargin and d.value.toReal() <= bin.rightMargin
						else if bin.closure = ClosureType::closedOpen then
							d.value.toReal() >= bin.leftMargin and d.value.toReal() < bin.rightMargin
							else if bin.closure = ClosureType::openClosed then
								d.value.toReal() > bin.leftMargin and d.value.toReal() <= bin.rightMargin
								else if bin.closure = ClosureType::openOpen then
									d.value.toReal() > bin.leftMargin and d.value.toReal() < bin.rightMargin
								else false endif
							endif
						endif
					endif
		)


context RuleBasedRowFilter
	inv inv_makeCorrectRuleFilter:
		if self.parameter->select(p | p.oclIsKindOf(Rule))->asSequence()->at(1).oclAsType(Rule).operator.oclIsKindOf(BinaryOp) then
			let filterValues = self.parameter->select(p | p.oclIsTypeOf(Rule)).oclAsType(Rule).operator.oclAsType(BinaryOp)->collect(compareOperand.value) in
				if self.parameter->select(p | p.oclIsTypeOf(Rule)).oclAsType(Rule).operator.oclAsType(BinaryOp)->asSequence()->at(1).oclIsTypeOf(EqualOp) then
					self.getOutputDataset(1).data->select(d | 
						d.col.uri = self.parameter.oclAsType(Rule)->asSequence()->at(1).operator.colOperand.column.uri)->collect(value)->forAll(v | filterValues->includes(v))
				else
					false
				endif
		else
			false
		endif
	
context RowFilter
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv inv_makeCorrectFilter:
		if (self.parameter->select(p | p.oclIsKindOf(FilterType))->size() = 1) 	then
			if (self.parameter->select(p | p.oclIsKindOf(MatchingType))->size() = 1) then
				if(self.getPrimitiveParameter('include').value.toBoolean()) then
					if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->size() =1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toReal() >= self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).min and 
								v.toReal() <= self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).max)

					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toInteger() >= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min and 
								v.toInteger() <= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)

					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(MissingValues)).oclAsType(MissingValues)->size() = 1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(v | v.isUndefined()
						or self.getOutputDataset(1).null_values->includes(v))

					else if (self.parameter->select(p | p.oclIsTypeOf(RowNumber)).oclAsType(RowNumber)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						self.getOutputDataset(1).rows->collect(uri)->asSequence()->forAll(
							u | u >= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min and u <= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)
					else false endif endif endif endif
				else if not self.getPrimitiveParameter('include').value.toBoolean() then
					if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->size() =1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toReal() < self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).min or 
								v.toReal() > self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).max)
					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toInteger() < self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min or 
								v.toInteger() > self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)
					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(MissingValues)).oclAsType(MissingValues)->size() = 1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(v | v.isDefined()
						and not self.getOutputDataset(1).null_values->includes(v))
					else if (self.parameter->select(p | p.oclIsTypeOf(RowNumber)).oclAsType(RowNumber)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						self.getOutputDataset(1).data->collect(value) = 
						self.getInputDataset(1).data->select(d | d.row.uri > self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min and
						d.row.uri < self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)->collect(value)
					else false endif endif endif endif
				else false endif endif
			else false endif
		else false endif


context RowSplitter
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv inv_makeCorrectFilter:
		if (self.parameter->select(p | p.oclIsKindOf(FilterType))->size() = 1) 	then
			if (self.parameter->select(p | p.oclIsKindOf(MatchingType))->size() = 1) then
				if(self.getPrimitiveParameter('include').value.toBoolean()) then

					if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->size() =1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toReal() >= self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).min and 
								v.toReal() <= self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).max) and (
						self.getOutputDataset(2).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toReal() < self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).min or 
								v.toReal() > self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).max) )
						
					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toInteger() >= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min and 
								v.toInteger() <= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max) and (
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toInteger() < self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min or
								v.toInteger() > self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max) )

					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(MissingValues)).oclAsType(MissingValues)->size() = 1) then
						(self.getOutputDataset(1).data->select(
							d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)->forAll(v | v.isUndefined()
							or self.getOutputDataset(1).null_values->includes(v))) and
						self.getOutputDataset(2).data->select(
							d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)->forAll(v | v.isDefined()
							and not self.getOutputDataset(2).null_values->includes(v))

					else if (self.parameter->select(p | p.oclIsTypeOf(RowNumber)).oclAsType(RowNumber)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						self.getOutputDataset(1).data->collect(value) = 
						self.getInputDataset(1).data->select(d | d.row.uri >= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min and
						d.row.uri <= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)->collect(value) and 
						(self.getOutputDataset(2).data->collect(value) = 
						self.getInputDataset(1).data->select(d | d.row.uri < self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min or
						d.row.uri > self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)->collect(value))					

					else false endif endif endif endif
				else if(not self.getPrimitiveParameter('include').value.toBoolean()) then
					if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->size() =1) then
						(self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toReal() < self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).min or 
								v.toReal() > self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).max)) and
						self.getOutputDataset(2).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toReal() >= self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).min and 
								v.toReal() <= self.parameter->select(p | p.oclIsTypeOf(RangeFloat)).oclAsType(RangeFloat)->asSequence()->at(1).max)

					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						(self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toInteger() < self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min or 
								v.toInteger() > self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)) and
						self.getOutputDataset(2).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(
								v | v.toInteger() >= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min and 
								v.toInteger() <= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)						

					else if (self.parameter->select(p | p.oclIsTypeOf(ColValue)).oclAsType(ColValue)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(MissingValues)).oclAsType(MissingValues)->size() = 1) then
						self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value)->forAll(v | v.isDefined()
						and not self.getOutputDataset(1).null_values->includes(v)) and
						(self.getOutputDataset(2).data->select(
							d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)->forAll(v | v.isUndefined()
							or self.getOutputDataset(1).null_values->includes(v)))

					else if (self.parameter->select(p | p.oclIsTypeOf(RowNumber)).oclAsType(RowNumber)->size() = 1 and self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->size() = 1) then
						(self.getOutputDataset(1).data->collect(value) = 
						self.getInputDataset(1).data->select(
							d | d.row.uri < self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min or
						d.row.uri > self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)->collect(value)) and
						self.getOutputDataset(2).data->collect(value) = 
						self.getInputDataset(1).data->select(d | d.row.uri >= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).min and
						d.row.uri <= self.parameter->select(p | p.oclIsTypeOf(RangeInt)).oclAsType(RangeInt)->asSequence()->at(1).max)->collect(value)

					else false endif endif endif endif
				else false endif endif
			else false endif
		else false endif
	inv post_twoDatasets: self.getOutputDatasets()->size() = 2

context Concatenate
	inv post_oneDataset: self.getOutputDatasets()->size() = 1
	inv makeCorrectConcatenateRows: self.getOutputDataset(1).rows->size() = 
	self.getInputDataset(1).rows->size() + self.getInputDataset(2).rows->size()
	inv makeCorrectConcatenateCols: self.getOutputDataset(1).cols.name->asSequence() = 
	self.getInputDataset(1).cols.name->union(self.getInputDataset(2).cols.name)->asSet()->asSequence()
	

context ConstantValueColumn
	inv pre_noColumnDataset: not self.getInputDataset(1).existColumn(self.getPrimitiveParameter('name').value) 
	inv post_columnDataset: self.getOutputDataset(1).existColumn(self.getPrimitiveParameter('name').value)
	inv inv_makeCorrectCreation: self.getOutputDataset(1).data->select(
		d | d.col.name = self.getPrimitiveParameter('name').value)->collect(value)->forAll(
			v | v = self.getPrimitiveParameter('value').value)

context ColumnRename
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv post_newColumnDset: self.getOutputDataset(1).cols->collect(name)->includes(self.getPrimitiveParameter('newName').value)
	inv post_correctType: 
		if self.existPrimitiveParameter('type') then
			if self.getPrimitiveParameter('type').value = 'Categorical' then
				self.getOutputDataset(1).cols->select(c | c.uri = self.getColumnParam(1).column.uri)->asSequence()->at(1).type = ValueType::Categorical
			else
				if self.getPrimitiveParameter('type').value = 'String' then
				self.getOutputDataset(1).cols->select(c | c.uri = self.getColumnParam(1).column.uri)->asSequence()->at(1).type = ValueType::String

				else 
					if self.getPrimitiveParameter('type').value ='Boolean' then
						self.getOutputDataset(1).cols->select(c | c.uri = self.getColumnParam(1).column.uri)->asSequence()->at(1).type = ValueType::Boolean
					else
						if self.getPrimitiveParameter('type').value = 'Int' then
							self.getOutputDataset(1).cols->select(c | c.uri = self.getColumnParam(1).column.uri)->asSequence()->at(1).type = ValueType::Int
						else
							if self.getPrimitiveParameter('type').value = 'Float' then
								self.getOutputDataset(1).cols->select(c | c.uri = self.getColumnParam(1).column.uri)->asSequence()->at(1).type = ValueType::Float
							else
								if 	self.getPrimitiveParameter('type').value = 'DateTime' then
									self.getOutputDataset(1).cols->select(c | c.uri = self.getColumnParam(1).column.uri)->asSequence()->at(1).type = ValueType::DateTime
								else false endif
							endif
						endif
					endif
				endif
			endif						
		else true endif
	inv inv_makeCorrectRename:self.getInputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value) = self.getOutputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)


context NumberToString
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv post_columnDset: self.getOutputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv post_columnTypeString: self.getOutputDataset(1).cols->select(
		c | c.name = self.getColumnParam(1).column.name)->asSequence()->at(1).type = ValueType::String
	inv inv_makeCorrectNumberToString:self.getInputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value) = self.getOutputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)

context Sorter
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv pre_define_sortType: self.parameter->select(p|p.oclIsTypeOf(SortCriteria))->size() = 1
	inv post_makeCorrectSort:
		let sortData = self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->collect(value) in
			if self.parameter->select(p | p.oclIsTypeOf(SortCriteria)).oclAsType(SortCriteria)->collect(sortType)->asSequence()->at(1) = SortType::ASC then
				let sortDataSeq = sortData->asSequence() in
					sortData->iterate(elem; index : Integer = 1 | if elem = sortDataSeq->at(index) then index + 1 else index endif) = sortData->size()
			else
				let sortDataSeq = sortData->asSequence()->reverse() in
					sortData->iterate(elem; index : Integer = 1 | if elem = sortDataSeq->at(index) then index + 1 else index endif) = sortData->size()
			endif

context ConditionalFunction
	inv pre_defineRule: self.parameter->select(p | p.oclIsTypeOf(Rule))->size() >= 1
	inv inv_noAlterRestValues:
	if self.parameter->select(p | p.oclIsTypeOf(Rule)).oclAsType(Rule).operator->asSequence()->at(1).oclIsTypeOf(MissingOp) then
		self.getInputDataset(1).data->select(d | d.col.uri = self.parameter.oclAsType(Rule)->asSequence()->at(1).operator.colOperand.column.uri and 
		not self.getInputDataset(1).null_values->includes(d.value))->forAll(d | self.getOutputDataset(1).data->select(d2 | d2.col.uri = d.col.uri and d2.row.uri = d.row.uri)->asSequence->at(1).value = d.value)
	else
		if self.parameter->select(p | p.oclIsTypeOf(Rule))->asSequence()->at(1).oclAsType(Rule).operator.oclIsTypeOf(EqualOp) then 
			let rightOpValue = self.parameter->select(p | p.oclIsTypeOf(Rule)).oclAsType(Rule).operator.oclAsType(BinaryOp).compareOperand.value in
							self.getInputDataset(1).data->select(d | d.col.uri = self.parameter.oclAsType(Rule)->asSequence()->at(1).operator.colOperand.column.uri and 
							not rightOpValue->includes(d.value))->forAll(d | self.getOutputDataset(1).data->select(d2 | d2.col.uri = d.col.uri and d2.row.uri = d.row.uri)->asSequence->at(1).value = d.value)
		else false endif
	endif

	inv inv_makeCorrectFunction:
		if self.parameter->select(p | p.oclIsTypeOf(Rule)).oclAsType(Rule).operator->asSequence()->at(1).oclIsTypeOf(MissingOp) then
			let imputeValue = self.parameter->select(p | p.oclIsTypeOf(Rule)).oclAsType(Rule).operator->asSequence()->at(1).oclAsType(UnaryOp).resultOperand.value in
				self.getInputDataset(1).data->select(d | d.col.uri = self.parameter.oclAsType(Rule)->asSequence()->at(1).operator.colOperand.column.uri and (
						d.value.isUndefined() or self.getInputDataset(1).null_values->includes(d.value)))->collect(row.uri)->forAll(
							uri | self.getOutputDataset(1).data->select(d2| d2.col.uri = self.parameter.oclAsType(Rule)->asSequence()->at(1).operator.colOperand.column.uri)->select(
								d2 | d2.row.uri = uri)->asSequence()->at(1).value = imputeValue
						)
		else 
			if self.parameter->select(p | p.oclIsTypeOf(Rule))->asSequence()->at(1).oclAsType(Rule).operator.oclIsTypeOf(EqualOp) then
				let rightOpValue = self.parameter->select(p | p.oclIsTypeOf(Rule)).oclAsType(Rule).operator.oclAsType(BinaryOp).compareOperand.value in
					let binaryOpResult = self.parameter->select(p | p.oclIsTypeOf(Rule))->asSequence()->at(1).oclAsType(Rule).operator.oclAsType(BinaryOp).resultOperand.value in
						self.getInputDataset(1).data->select(d | d.col.uri = self.parameter.oclAsType(Rule)->asSequence()->at(1).operator.colOperand.column.uri
						 and rightOpValue->includes(d.value))->collect(row.uri)->forAll(
							uri | self.getOutputDataset(1).data->select(d2| d2.col.uri = self.parameter.oclAsType(Rule)->asSequence()->at(1).operator.colOperand.column.uri)->select(
								d2 | d2.row.uri = uri)->asSequence()->at(1).value = binaryOpResult
						)
			else 
				false
			endif
		endif

context Binarizer
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv post_transformValues: self.getOutputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)->forAll(v | v.toInteger() = 0 or v.toInteger() = 1)


context Normalizer
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv pre_columnTypeNumerical: self.getColumnParam(1).column.type = ValueType::Int or self.getColumnParam(1).column.type = ValueType::Float
	inv post_transformValues: self.getOutputDataset(1).data->select(
		d | d.col.uri = self.getColumnParam(1).column.uri)->collect(value)->forAll(v | v.toReal() >= 0 and v.toReal()<=1)

context MathFormula
	inv inv_makeCorrectFormula:
		if self.parameter->select(p | p.oclIsTypeOf(Division))->size = 1 then
			let primitiveOperandValue = self.parameter->select(p | p.oclIsTypeOf(MathFunction)).oclAsType(MathFunction)->asSequence->at(1).primitive.value in
			self.getInputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->forAll(d | 
						self.getOutputDataset(1).data->select(d2 | d2.col.uri = self.getColumnParam(1).column.uri and d2.row.uri = d.row.uri)->asSequence()->at(1).value = d.value.toReal() / primitiveOperandValue.toReal()

						)
		else false endif

context LabelEncoder
	inv pre_columnDset: self.getInputDataset(1).existColumn(self.getColumnParam(1).column.name)
	inv post_labelEncode: self.getOutputDataset(1).getColumn(self.getColumnParam(1).column.name).dataOfCol->forAll(d | self.parameter->select(p | p.oclIsTypeOf(Label)).oclAsType(Label)->collect(value)->includes(d.value.toInteger()))
	inv inv_makeCorrectEncoder: self.getColumnParam(1).column.dataOfCol->forAll(
				d |self.getOutputDataset(1).data->select(d2 | d2.col.uri = self.getColumnParam(1).column.uri and d2.row.uri = d.row.uri)->asSequence()->at(1).value.toInteger() = 
				self.parameter->select(p | p.oclIsTypeOf(Label)).oclAsType(Label)->select(l | l.label = d.value)->asSequence()->at(1).value
			)